\documentclass[11pt]{article}
\usepackage{pl}
\usepackage{html}
%\onefile
\sloppy
\makeindex

\onefile
\htmloutput{.}				% Output directory
\htmlmainfile{windows}			% Main document file
\bodycolor{white}			% Page colour

\renewcommand{\runningtitle}{SWI-Prolog for MS-Windows}

\begin{document}

\title{SWI-Prolog for MS-Windows}
\author{Jan Wielemaker \\
	HCS (formerly SWI), \\
	University of Amsterdam \\
	The Netherlands \\
	E-mail: \email{jan@swi-prolog.org}}

\maketitle

\begin{abstract}
This document gets you started using SWI-Prolog on MS-Windows. It
also describes the components and issues that are specific to
MS-Windows. It is by no means a manual or Prolog tutorial. The reference
manual is available online or can be downloaded in HTML and PDF format
from the \url[SWI-Prolog website]{http://www.swi-prolog.org/}, which
also provides links to books, online tutorials and other Prolog related
material.
\end{abstract}


\tableofcontents

\section{Using SWI-Prolog}

\subsection{Starting Prolog and loading a program}

The SWI-Prolog executable \program{swipl-win.exe} can be started from the
\emph{StartMenu} or by opening a \fileext{pl} file holding Prolog
program text from the Windows explorer.%
	\footnote{The .PL file extension can be changed
		  during installation. See \secref{ext}.}
The installation folder (by default \file{C:\bsl{}Program~Files\bsl{}pl})
contains a subfolder \file{demo} with the file \file{likes.pl}. This
file can be opened in Prolog from the StartMenu, by opening \file{likes.pl}
in the Windows explorer or using the following command in the Prolog
application.  Be sure to get the quotes right and terminate the command
with a full-stop (\chr{.}).

\begin{code}
?- [swi('demo/likes')].
\end{code}

If Prolog is started from the start menu it is passed the option
\texttt{--win_app}, which causes it to start in the local equivalent of
\file{My Documents\bsl{}Prolog}.  This folder is created if it does not
exist.


\subsection{Executing a query}			\label{sec:execquery}

After loading a program, one can ask Prolog queries about the program.
The query below asks Prolog what food `sam' likes. The system responds
with \mbox{\tt X = <value>} if it can prove the goal for a certain
\arg{X}. The user can type the semi-colon (;)%
	\footnote{On most installations, single-character commands are
		  executed without waiting for the {\sc return} key.}
if (s)he wants another solution, or {\sc return} if (s)he is satisfied,
after which Prolog will say {\bf Yes}. If Prolog answers {\bf No}, it
indicates it cannot find any (more) answers to the query. Finally,
Prolog can answer using an error message to indicate the query or
program contains an error.

\begin{code}
?- likes(sam, X).

X = dahl ;

X = tandoori ;

...

X = chips ;

No
?-
\end{code}


\subsection{Menu commands}		\label{sec:menu}

The SWI-Prolog console provided by \program{swipl-win.exe} has a menu for
accessing the most commonly used commands. We assume not all menu
entries need to be explained in details.  We make some exceptions:

\begin{description}
    \definition{File/Reload modified files}
This menu reloads all loaded source-files that have been modified
using the make/0 command described in \secref{commands}.

    \definition{File/Navigator ...}
Opens an explorer-like view on Prolog files and the predicates they
contain.

    \definition{Settings/Font ...}
Allows for changing the font of the console.  On some installation the
default font gives redraw and cursor dislocation problems.  In this case
you may wish to select an alternative.  Some built-in commands assume
non-proportional fonts.

    \definition{Settings/User init file ...}
Edits the user personalisation file.  If no such file exists it first
installs a default file as \file{pl.ini} that contains commonly used
settings in comments.

    \definition{Settings/Stack sizes ...}
Allows to define the maximum size to which the various Prolog stacks are
allowed to grow. The system defaults are chosen to make erroneous
programs fail quickly on modest hardware.  Programs with large data
structures or many choice-points often need larger stacks.  Note that
an active Prolog process growing over the size of the physical memory of
your computer can make the system extremely slow.

    \definition{Run/Interrupt}
Try to interrupt the running Prolog process.  This is the same as
using \emph{Control-C}.  Sometimes interrupts are not honoured or
take very long to process.  Closing the window twice provides a
way to force Prolog to stop.

    \definition{Run/New thread}
Creates a new interactor window running in a separate thread of
execution.  This may be used to inspect the database or program
while the main task continues.

    \definition{Debug/Edit spy points ...}
Edit break-points on predicates. From the PceEmacs editor (see
\secref{edit}) break-points can also be set on specific calls from
specific clauses.

    \definition{Debug/Graphical debugger ...}
Use the source-level debugger on the next spy- or break-point or
other call that enables the debugger.

    \definition{Help}
The help menu provides various starting point to related documents.
Items flagged with {\sf (on www)} open your default internet
browser on a page of the SWI-Prolog website.
\end{description}


\subsection{Editing Prolog programs}		\label{sec:edit}

There are three options for editing.  One is to run an editor of choice
in a separate window and use the below described make/0 command to
reload modified files.  In addition to this option Prolog can be used
to locate predicates, modules and loaded files by specifying the editor
of choice for use with the edit/1 command described below.  This is
achieved by editing the personalisation file (see \secref{menu}) and
follow the instructions in the comments.

Finally, you may wish to use the built-in editor called \emph{PceEmacs}.
This editor provides colourisation support based on real-time parsing
and cross-reference analysis of the program. It is started using the
command \verb$?- emacs.$ or can be set as default editor in the
personalisation file.


\subsection{Some useful commands}
\label{sec:commands}

This section provides a very brief overview of important or
commonly used SWI-Prolog predicates to control the environment.

\begin{description}
    \predicate{consult}{1}{:File}
Load a source-file. On Windows folders may be specified with the
DOS/Windows \chr{\}, which must be escaped or using the POSIX standard
\chr{/}.  Especially when used in source-code \chr{/} is to be preferred
as it is portable.  A Prolog list ([\ldots]) can be used to abbreviate
the consult command.  The file-extension (\fileext{pl} as well as the
selected alternative) can be omitted.  Here are some examples:

\begin{center}
\begin{tabular}{ll}
\tt ?- consult(likes). & Load \file{likes.pl} from the current folder
			 (see pwd/0). \\
\tt ?- ['C:/Program Files/pl/demo/likes'] & Load \file{likes.pl} using
			absolute path. \\
\tt ?-
['C:\bsl{}\bsl{}Program~Files\bsl{}\bsl{}pl\bsl{}\bsl{}demo\bsl{}\bsl{}likes']
& Same using Windows-style path-name \\
\end{tabular}
\end{center}

    \predicate{pwd}{0}{}
Print working directory (folder).

    \predicate{ls}{0}{}
List files in current directory.

    \predicate{edit}{0}{}
If Prolog is started by opening a \fileext{pl} file in the explorer,
edit this file.  Also available from the menu.

    \predicate{edit}{1}{+Spec}
Edit file, predicate, module, etc.\ with the given name.  If multiple
items are named \arg{Spec} it prompts for the desired alternative.

    \predicate{make}{0}{}
Reload all files that have been changed since they where last loaded.
Normally used after editing one or more files.

    \predicate{trace}{0}{}
Start the interactive debugger.  There are three ways to use this.
Entered as a single goal at the top-level, the next query will be
traced.  Alternatively it can be used in conjunction with the goal
to be debugged: \exam{?- trace, run.} and finally you can include it
in your program to start tracing at a particular point or under a
particular condition:

\begin{code}
	...,
	(var(X) -> trace ; true),
	...,
\end{code}

    \predicate{gtrace}{0}{}
Same as trace, but forces the use of the graphical (source-level)
debugger.

    \predicate{apropos}{1}{+Keyword}
Search for all predicates that contain \arg{Keyword} in their name
or short description.  If a GUI environment is available the results
are hyperlinks.  Otherwise use help/1 to get details on selected
hits.

    \predicate{help}{1}{+Spec}
Give help on \arg{Spec}, which is normally the name of a predicate or
C interface function.
\end{description}


\section{Using SWI-Prolog with C/C++}

Using MSVC or a compiler with compatible calling format you can write
C or C++ code that can be loaded into SWI-Prolog and called as a
predicate.  You can also embed SWI-Prolog in C/C++ applications.

Details on how to interact with Prolog are in the
\url[SWI-Prolog reference
manual]{http://hcs.science.uva.nl/projects/SWI-Prolog/Manual/}. The
mailing list archives and TWiki web provide problems and solutions to
the many problems that may occur. Documentation of the \file{SWI-cpp.h}
C++ include file is available from the \url[package
documentation]{http://www.swi-prolog.org/packages}. This section only
discusses some Windows specific issues.

\subsection{Using DevStudio}

First of all, add the \file{include} folder of the installation to
the search-path for headers and the \file{lib} folder to the search-path
for libraries.  Both DLLs (extensions) or embedded executables should
link to \file{libpl.lib} and, if appropriate, to \file{msvcrt.lib}, the
multi-threaded DLL version of the MSVC runtime library.

To create extensions, simply use the Win32 DLL project template.  To
embed Prolog, care should be taken that Prolog can find the Prolog
installation. For \emph{development}, the simplest way to ensure this is
by adding the installation \file{bin} folder to the \verb|%PATH%|
environment and call PL_initialise() as illustrated below.
PL_initialise() uses the path of the loaded \file{libpl.dll} module
to find the Prolog installation folder.%
	\footnote{When the C++ interface from \file{SWI-cpp.h}, these
		  comments apply to the arguments for PlEngine().}

\begin{code}
  { static char *av[] = { "libpl.dll", NULL };

    if ( !PL_initialise(1, av) )
    { <error>
    }
  }
\end{code}

To create an executable that does not rely on Prolog one must create
a saved-state of the required Prolog code and attach this to the
executable.  Creating saved-states is described with qsave_program/2
in the reference manual.  This can be attached to a state using the
DOS command below to create \file{final.exe} from the executable
produced by MSVC and the generated saved-state.

\begin{code}
> copy /b file.exe+file.state final.exe
\end{code}


\subsection{Using swipl-ld.exe}

The \program{swipl-ld.exe} automates most of the above complications and
provides compatibility for common tasks on many platforms supported
by SWI-Prolog.  To use it with MSVC, set the PATH, INCLUDE and LIB
environment to find the DevStudio tools, headers and libraries as
well as the Prolog ones described above. Now, an extension
\file{myext.dll} is created from the source \file{myext.c} using

\begin{code}
> swipl-ld -shared -o myext myext.c
\end{code}

An embedded executable is created from C, C++ and Prolog files using

\begin{code}
> swipl-ld -o myexe file.c ... file.pl ...
\end{code}


\section{The installation}


\subsection{Supported Windows versions}			\label{sec:winver}

SWI-Prolog 5.5.x and later are UNICODE applications, requiring Windows
NT or later (2000, XP, Vista). Although Microsoft provides a library
that allows such program to run under Windows 95/98/ME, this library is
licensed such that it cannot be used with Open Source software. Users of
these old operating systems are forced to stick with version 5.4.7.

For 64-bit versions of Windows, such as Windows XP 64-bit edition and
Windows vista 64-bit edition, we have two versions of SWI-Prolog. The
\texttt{w32pl}* installers can be used to install the normal 32-bit
version of Prolog.  The \texttt{w64pl}* installers install a version
for the \textsc{AMD64} (= \textsc{X64}) architecture.  There are no
binaries for the \textsc{IA64} architecture used in older 64-bit
hardware.  The reference manual has a section comparing these two
versions.


\subsection{Choosing the file-extension}		\label{sec:ext}

By default, Prolog uses the \fileext{pl} extension to indicate Prolog
source-files. Unfortunately this extension conflicts with the Perl
language. If you want to use both on the same Windows machine SWI-Prolog
allows you to choose a different extension during the installation. The
extension \fileext{pro} is a commonly used alternative. If portability
is an issue, it is advised to use the alternative extension only for the
\emph{load file}, the source-file that loads the entire program and use
the normal \fileext{pl} extension for libraries and files loaded from
other files.


\subsection{Installed programs}

The table below lists the installed components. Some components are
marked (32-bits) or (64-bits). Most of this is because the 64-bits
version is built using more recent tools and from more recent versions
of required libraries using different naming conventions.  This will
probably be synchronised in the future.

\begin{center}
\begin{tabular}{|l|p{4in}|}
\hline
\multicolumn{2}{|c|}{Programs} \\
\hline
\verb$bin\swipl-win.exe$	& Default Windows application for interactive
			  use. \\
\verb$bin\swipl.exe$    & Console-based version for scripting purposes. \\
\hline
\multicolumn{2}{|c|}{Utilities} \\
\hline
\verb$bin\swipl-ld.exe$	& Linker front-end to make single-file mixed
			  Prolog/C/C++ executables. \\
\verb$bin\plrc.exe$	& Manipulate Prolog resource files. \\
\hline
\multicolumn{2}{|c|}{Important directories} \\
\hline
\verb$bin$		& Executables and DLL files \\
\verb$library$		& Prolog library \\
\verb$boot$		& Sources for system predicates \\
\verb$include$		& C/C++ header files for embedding or to create
			  extensions \\
\verb$xpce$		& XPCE graphics system \\
\verb$xpce\prolog\lib$	& XPCE/Prolog library \\
\hline
\multicolumn{2}{|c|}{DLLs and other supporting files} \\
\hline
\verb$boot32.prc$       & Initial Prolog state (32-bits) \\
\verb$boot64.prc$       & Initial Prolog state (64-bits) \\
\verb$\bin\libpl.dll$	& The Prolog kernel \\
\verb$\bin\plterm.dll$	& The window for \program{swipl-win.exe} \\
\verb$\bin\pthreadVC.dll$& POSIX thread runtime library (32-bits) \\
\verb$\bin\pthreadVC2.dll$& POSIX thread runtime library (64-bits) \\
\verb$\bin\msvcr80.dll$ & Microsoft C runtime library (64-bits) \\
\hline
\multicolumn{2}{|c|}{Extension DLLs (plugins)} \\
\hline
\verb$\bin\cgi.dll$		 & Gather CGI GET and POST arguments \\
\verb$\bin\double_metaphone.dll$ & Soundex (sounds similar) \\
\verb$\bin\memfile.dll$		 & In-memory temporary `files' \\
\verb$\bin\odbc4pl.dll$		 & ODBC interface \\
\verb$\bin\plregtry.dll$	 & Windows registry interface \\
\verb$\bin\porter_stem.dll$	 & Porter stemming implementation \\
\verb$\bin\random.dll$		 & Portable random number generator \\
\verb$\bin\rdf_db.dll$		 & RDF database \\
\verb$\bin\readutil.dll$	 & Fast reading utility \\
\verb$\bin\sgml2pl.dll$		 & SGML/XML parser \\
\verb$\bin\socket.dll$		 & Prolog socket interface \\
\verb$\bin\table.dll$		 & Access structured files as tables \\
\verb$\bin\time.dll$		 & Timing and alarm library \\
\verb$\bin\xpce2pl.dll$		 & The XPCE graphics system \\
\verb$\bin\zlib1.dll$		 & Compression library (32-bit) \\
\verb$\bin\zlibwapi.dll$	 & Compression library (64-bit) \\
\verb$\bin\zlib4pl.dll$		 & Compression library interface \\
\hline
\end{tabular}
\end{center}

\subsection{Installed Registry keys and menus}

The filetype \fileext{pl} or chosen alternative (see \secref{ext}) is
associated to \program{swipl-win.exe}. A chosen folder (default SWI-Prolog)
is added to the start-menu holding shortcuts to Prolog and some related
utilities. The following registry keys are in use. The 64-bit version
uses \texttt{Prolog64} instead of \texttt{Prolog} as a key to accomodate
installation of both versions on the same machine. Note that opening a
\fileext{pl} file can be associated with one of the installed Prolog
version only.

\begin{center}
\begin{tabular}{|l|p{4in}|}
\hline
\multicolumn{2}{|c|}{\tt HKEY_LOCAL_MACHINE\bsl{}Software\bsl{}SWI\bsl{}Prolog} \\
\hline
\verb$fileExtension$		& Extension used for Prolog files \\
\verb$group$			& Start-menu group \\
\verb$home$			& Installation directory \\
\hline
\multicolumn{2}{|c|}{\tt HKEY_CURRENT_USER\bsl{}Software\bsl{}SWI\bsl{}Prolog} \\
\hline
\verb$localSize$		& Default local stack size (KB) \\
\verb$globalSize$		& Default global stack size (KB) \\
\verb$trailSize$		& Default trail stack size (KB) \\
\hline
\multicolumn{2}{|c|}{\tt HKEY_CURRENT_USER\bsl{}Software\bsl{}SWI\bsl{}Plwin\bsl{}Console} \\
\multicolumn{2}{|c|}{Note: thread-windows store the same info in sub-keys} \\
\hline
\verb$Height$			& Height of window in character units \\
\verb$Width$			& Width of window in character units \\
\verb$X$			& Left-edge of window in pixel units \\
\verb$Y$			& Top-edge of window in pixel units \\
\verb$SaveLines$		& Number of lines available for scrollback \\
\hline
\end{tabular}
\end{center}


\subsection{Execution level}

The installer asks for the \const{admin} execution level (Vista) to be
able to write shortcuts and registry keys.


\subsection{Creating a desktop menu item}

If you want a desktop entry for SWI-Prolog, right-drag
\program{swipl-win.exe} to the desktop and select `Create shortcut'. Then
edit the properties and add \const{--win_app} to the commandline to make
the application start in \file{My Documents\bsl{}Prolog}.


\section{The SWI-Prolog community and foundation}


\subsection{Web-site and mailing lists}

The SWI-Prolog web-site is located at \url{http://www.swi-prolog.org/}.
Part of the web is powered by \url[TWiki]{http://twiki.org/}, a
\emph{wiki} web that can be edited by any registered user and used to
exchange ideas, problems and solutions.  The web also provides access
to the archive of the mailing list and allows to (de)register the
mailing list.  Finally, it incorporates Bugzilla, the Mozilla project
bugtracking system, for reporting bugs and tracking issues.


\subsection{About license conditions}

The SWI-Prolog license allows it to be used in a wide variety of
environments, including closed-source commercial applications. In
practice, redistribution and embedding is allowed, as long as
\emph{modifications} to the SWI-Prolog source are published following
the Free Software rules.

The SWI-Prolog kernel and foreign libraries are licensed under the
\emph{Lesser General Public License} (LGPL).  The Prolog files are
licensed under the normal \emph{General Public License} GPL with
an additional statement that allows for embedding in proprietary
software:

\begin{quote}
    As a special exception, if you link this library with other files,
    compiled with a Free Software compiler, to produce an executable, this
    library does not by itself cause the resulting executable to be covered
    by the GNU General Public License. This exception does not however
    invalidate any other reasons why the executable file might be covered by
    the GNU General Public License.
\end{quote}

This exception is a proven construct used for \emph{libgcc}, the GNU
C-compiler runtime library.


\subsection{Supporting SWI-Prolog}

There are several ways to support SWI-Prolog:

\begin{itemize}
    \item Extend the system with contributions
    \item Improve the system by submitting bug reports and patches.
    \item Link to \url{http://www.swi-prolog.org} and refer to SWI-Prolog
          in publications.
    \item Ask for commercial development or support at
          \url{http://www.cognitivetools.com/}
    \item Support development financially at
          \url{http://www.swi-prolog.org/donate.html}.
\end{itemize}

\end{document}
